package data

import (
	"crypto/sha256"
	"encoding/base32"
	"errors"
	"math/rand"
	"net/http"
	"strings"
	"time"

	up "github.com/upper/db/v4"
)

//Token Type maps the tokens DB table
type Token struct {
	ID        int       `db:"id,omitempty" json:"id"`
	UserID    int       `db:"user_id" json:"user_id"`
	FirstName string    `db:"first_name" json:"first_name"`
	Email     string    `db:"email" json:"email"`
	PlainText string    `db:"token" json:"token"`
	Hash      []byte    `db:"token_hash" json:"-"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
	Expires   time.Time `db:"expiry" json:"expiry"`
}

//Table func overrides the 'tokens' DB table name to refers it with any other name,
//  if it the case
func (t *Token) Table() string {
	return "tokens"
}

//GetUserForToken returns the info of a previosly authenticated user, through the user_id
//field registered in token DB table, , this user_id ensures that a valid token has been generated for  this user
func (t *Token) GetUserForToken(token string) (*User, error) {
	var u User
	var theToken Token
	//get the data from token table for a specific token string as and
	//pass by reference to theToken
	collection := upper.Collection(t.Table())
	res := collection.Find(up.Cond{"token": token})
	err := res.One(&theToken)
	if err != nil {
		return nil, err
	}
	//get the user data form user DB table through the userID field of Thetoken
	collection = upper.Collection("users")
	res = collection.Find(up.Cond{"id": theToken.UserID})
	err = res.One(&u)
	if err != nil {
		return nil, err
	}
	//mapp the validated token to user info to be returned
	u.Token = theToken
	return &u, nil
}

//GetTokensForUser returns all the tokens created associated to an userID
func (t *Token) GetTokensForUser(id int) ([]*Token, error) {
	var tokens []*Token
	collection := upper.Collection(t.Table())
	res := collection.Find(up.Cond{"user_id": id})
	err := res.All(&tokens)
	if err != nil {
		return nil, err
	}
	return tokens, nil

}

func (t *Token) GetTokenByID(id int) (*Token, error) {
	var token Token
	collection := upper.Collection(t.Table())
	res := collection.Find(up.Cond{"id": id})
	err := res.One(&token)
	if err != nil {
		return nil, err
	}
	return &token, nil

}

//GetByToken, retrieve a token type with data from  DB table based in a specific token in string format
func (t *Token) GetByToken(plainText string) (*Token, error) {
	var token Token
	collection := upper.Collection(t.Table())
	res := collection.Find(up.Cond{"token": plainText})
	err := res.One(&token)
	if err != nil {
		return nil, err
	}
	return &token, nil

}

//Delete() use the Token ID to delete it from Token Table
func (t *Token) Delete(id int) error {
	collection := upper.Collection(t.Table())
	res := collection.Find(id)
	err := res.Delete()
	if err != nil {
		return err
	}

	return nil

}

//DeleteBytoken deletes a token from DB thorugh their string (plainText) version
func (t *Token) DeleteByToken(plainText string) error {
	collection := upper.Collection(t.Table())
	res := collection.Find(up.Cond{"token": plainText})
	err := res.Delete()
	if err != nil {
		return err
	}

	return nil

}

//Insert creates a new token for a specific user, delete the existing tokens before creates the new one
func (t *Token) Insert(token Token, u User) error {
	collection := upper.Collection(t.Table())
	//delete existing tokens for this user
	res := collection.Find(up.Cond{"user_id": u.ID})
	err := res.Delete()
	if err != nil {
		return err
	}
	//set the timestamp for the new token
	token.CreatedAt = time.Now()
	token.UpdatedAt = time.Now()
	//set the values from the user type to the new token
	token.FirstName = u.FirstName
	token.Email = u.Email

	//creates the new token in token DB table
	_, err = collection.Insert(token)
	if err != nil {
		return err
	}
	return nil

}

//GenerateToken use the base32 package and sha256 algo to create and encode the token it self
//return the token.hash field as array enable it for manipulation
func (t *Token) GenerateToken(userID int, ttl time.Duration) (*Token, error) {
	token := &Token{
		UserID:  userID,
		Expires: time.Now().Add(ttl),
	}
	randomBytes := make([]byte, 16)
	_, err := rand.Read(randomBytes)
	if err != nil {
		return nil, err
	}
	//populate the plainText token field from the randomBytes to produce a token with the same
	//amount of characters every time
	token.PlainText = base32.StdEncoding.WithPadding(base32.NoPadding).EncodeToString(randomBytes)
	//applyng encoding algo to plainText
	hash := sha256.Sum256([]byte(token.PlainText))
	//convert token.hash in array to being able to extract their content ("Bearer",XRdj8..)
	token.Hash = hash[:]

	return token, nil

}

//AuthenticateToken validates the token received through http request as a parameter
func (t *Token) AuthenticateToken(r *http.Request) (*User, error) {
	//get authorization header form request
	authorizationHeader := r.Header.Get("Authorization")
	if authorizationHeader == "" {
		return nil, errors.New(("no authorization header received"))
	}
	//split the header in their standard parts (similar to JWT) ("Bearer 13hunioixx..")
	headerParts := strings.Split(authorizationHeader, " ")
	if len(headerParts) != 2 || headerParts[0] != "Bearer" {
		return nil, errors.New("no authorization header received")
	}

	token := headerParts[1]
	//every token will have 26 characters length
	if len(token) != 26 {
		return nil, errors.New("token wrong size")
	}

	//if all checks pass get the token from DB
	tkn, err := t.GetByToken(token)
	if err != nil {
		return nil, errors.New("no matching token found")

	}

	if tkn.Expires.Before(time.Now()) {
		return nil, errors.New("expired token")
	}
	//get the user data for the authenticated token
	user, err := t.GetUserForToken(token)
	if err != nil {
		return nil, errors.New("no matching user found")
	}

	return user, nil

}

//ValidToken returns true if a token exists in token table in DB for a specific user and if this user
//has the string version of the token in user.PlainText
//
func (t *Token) ValidToken(token string) (bool, error) {

	user, err := t.GetUserForToken(token)
	if err != nil {
		return false, errors.New("no matching user found")
	}
	if user.Token.PlainText == "" {
		return false, errors.New(("no matching token found"))

	}

	return true, nil

}
